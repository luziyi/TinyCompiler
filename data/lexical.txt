const	<KW,4>
int	<KW,1>
MAX	<IDN,MAX>
=	<OP,14>
100	<INT,100>
;	<SE,28>
const	<KW,4>
float	<KW,6>
PI	<IDN,PI>
=	<OP,14>
3.14159	<FLOAT,3.14159>
;	<SE,28>
int	<KW,1>
add	<IDN,add>
(	<SE,24>
int	<KW,1>
a	<IDN,a>
,	<SE,29>
int	<KW,1>
b	<IDN,b>
)	<SE,25>
{	<SE,26>
return	<KW,3>
a	<IDN,a>
+	<OP,9>
b	<IDN,b>
;	<SE,28>
}	<SE,27>
float	<KW,6>
multiply	<IDN,multiply>
(	<SE,24>
float	<KW,6>
x	<IDN,x>
,	<SE,29>
float	<KW,6>
y	<IDN,y>
)	<SE,25>
{	<SE,26>
return	<KW,3>
x	<IDN,x>
*	<OP,11>
y	<IDN,y>
;	<SE,28>
}	<SE,27>
int	<KW,1>
max	<IDN,max>
(	<SE,24>
int	<KW,1>
a	<IDN,a>
,	<SE,29>
int	<KW,1>
b	<IDN,b>
)	<SE,25>
{	<SE,26>
if	<KW,7>
(	<SE,24>
a	<IDN,a>
>	<OP,15>
b	<IDN,b>
)	<SE,25>
{	<SE,26>
return	<KW,3>
a	<IDN,a>
;	<SE,28>
}	<SE,27>
else	<KW,8>
{	<SE,26>
return	<KW,3>
b	<IDN,b>
;	<SE,28>
}	<SE,27>
}	<SE,27>
int	<KW,1>
complex_function	<IDN,complex_function>
(	<SE,24>
int	<KW,1>
a	<IDN,a>
,	<SE,29>
int	<KW,1>
b	<IDN,b>
,	<SE,29>
int	<KW,1>
c	<IDN,c>
)	<SE,25>
{	<SE,26>
int	<KW,1>
result	<IDN,result>
;	<SE,28>
if	<KW,7>
(	<SE,24>
a	<IDN,a>
>	<OP,15>
b	<IDN,b>
)	<SE,25>
{	<SE,26>
if	<KW,7>
(	<SE,24>
a	<IDN,a>
>	<OP,15>
c	<IDN,c>
)	<SE,25>
{	<SE,26>
result	<IDN,result>
=	<OP,14>
a	<IDN,a>
;	<SE,28>
}	<SE,27>
else	<KW,8>
{	<SE,26>
result	<IDN,result>
=	<OP,14>
c	<IDN,c>
;	<SE,28>
}	<SE,27>
}	<SE,27>
else	<KW,8>
{	<SE,26>
if	<KW,7>
(	<SE,24>
b	<IDN,b>
>	<OP,15>
c	<IDN,c>
)	<SE,25>
{	<SE,26>
result	<IDN,result>
=	<OP,14>
b	<IDN,b>
;	<SE,28>
}	<SE,27>
else	<KW,8>
{	<SE,26>
result	<IDN,result>
=	<OP,14>
c	<IDN,c>
;	<SE,28>
}	<SE,27>
}	<SE,27>
return	<KW,3>
result	<IDN,result>
;	<SE,28>
}	<SE,27>
int	<KW,1>
test_operators	<IDN,test_operators>
(	<SE,24>
int	<KW,1>
a	<IDN,a>
,	<SE,29>
int	<KW,1>
b	<IDN,b>
)	<SE,25>
{	<SE,26>
int	<KW,1>
result	<IDN,result>
=	<OP,14>
0	<INT,0>
;	<SE,28>
result	<IDN,result>
=	<OP,14>
a	<IDN,a>
+	<OP,9>
b	<IDN,b>
;	<SE,28>
result	<IDN,result>
=	<OP,14>
a	<IDN,a>
-	<OP,10>
b	<IDN,b>
;	<SE,28>
result	<IDN,result>
=	<OP,14>
a	<IDN,a>
*	<OP,11>
b	<IDN,b>
;	<SE,28>
result	<IDN,result>
=	<OP,14>
a	<IDN,a>
/	<OP,12>
b	<IDN,b>
;	<SE,28>
result	<IDN,result>
=	<OP,14>
a	<IDN,a>
%	<OP,13>
b	<IDN,b>
;	<SE,28>
result	<IDN,result>
=	<OP,14>
-	<OP,10>
a	<IDN,a>
;	<SE,28>
if	<KW,7>
(	<SE,24>
a	<IDN,a>
>	<OP,15>
b	<IDN,b>
&&	<OP,21>
a	<IDN,a>
!=	<OP,20>
0	<INT,0>
)	<SE,25>
{	<SE,26>
result	<IDN,result>
=	<OP,14>
a	<IDN,a>
;	<SE,28>
}	<SE,27>
if	<KW,7>
(	<SE,24>
a	<IDN,a>
<	<OP,16>
b	<IDN,b>
||	<OP,22>
b	<IDN,b>
==	<OP,17>
0	<INT,0>
)	<SE,25>
{	<SE,26>
result	<IDN,result>
=	<OP,14>
b	<IDN,b>
;	<SE,28>
}	<SE,27>
if	<KW,7>
(	<SE,24>
!	<OP,23>
(	<SE,24>
a	<IDN,a>
<=	<OP,18>
b	<IDN,b>
)	<SE,25>
&&	<OP,21>
!	<OP,23>
(	<SE,24>
b	<IDN,b>
>=	<OP,19>
a	<IDN,a>
)	<SE,25>
)	<SE,25>
{	<SE,26>
result	<IDN,result>
=	<OP,14>
a	<IDN,a>
+	<OP,9>
b	<IDN,b>
;	<SE,28>
}	<SE,27>
return	<KW,3>
result	<IDN,result>
;	<SE,28>
}	<SE,27>
int	<KW,1>
main	<KW,5>
(	<SE,24>
)	<SE,25>
{	<SE,26>
int	<KW,1>
a	<IDN,a>
;	<SE,28>
int	<KW,1>
b	<IDN,b>
=	<OP,14>
20	<INT,20>
;	<SE,28>
float	<KW,6>
c	<IDN,c>
=	<OP,14>
3.14	<FLOAT,3.14>
;	<SE,28>
a	<IDN,a>
=	<OP,14>
10	<INT,10>
;	<SE,28>
int	<KW,1>
sum	<IDN,sum>
=	<OP,14>
add	<IDN,add>
(	<SE,24>
a	<IDN,a>
,	<SE,29>
b	<IDN,b>
)	<SE,25>
;	<SE,28>
float	<KW,6>
product	<IDN,product>
=	<OP,14>
multiply	<IDN,multiply>
(	<SE,24>
c	<IDN,c>
,	<SE,29>
2.0	<FLOAT,2.0>
)	<SE,25>
;	<SE,28>
int	<KW,1>
complex_result	<IDN,complex_result>
=	<OP,14>
(	<SE,24>
a	<IDN,a>
+	<OP,9>
b	<IDN,b>
)	<SE,25>
*	<OP,11>
(	<SE,24>
a	<IDN,a>
-	<OP,10>
b	<IDN,b>
)	<SE,25>
/	<OP,12>
(	<SE,24>
a	<IDN,a>
*	<OP,11>
b	<IDN,b>
)	<SE,25>
+	<OP,9>
(	<SE,24>
a	<IDN,a>
%	<OP,13>
b	<IDN,b>
)	<SE,25>
;	<SE,28>
if	<KW,7>
(	<SE,24>
a	<IDN,a>
<	<OP,16>
b	<IDN,b>
)	<SE,25>
{	<SE,26>
int	<KW,1>
temp	<IDN,temp>
=	<OP,14>
a	<IDN,a>
;	<SE,28>
a	<IDN,a>
=	<OP,14>
b	<IDN,b>
;	<SE,28>
b	<IDN,b>
=	<OP,14>
temp	<IDN,temp>
;	<SE,28>
}	<SE,27>
if	<KW,7>
(	<SE,24>
a	<IDN,a>
>	<OP,15>
0	<INT,0>
)	<SE,25>
{	<SE,26>
if	<KW,7>
(	<SE,24>
b	<IDN,b>
>	<OP,15>
0	<INT,0>
)	<SE,25>
{	<SE,26>
sum	<IDN,sum>
=	<OP,14>
sum	<IDN,sum>
+	<OP,9>
1	<INT,1>
;	<SE,28>
}	<SE,27>
else	<KW,8>
{	<SE,26>
sum	<IDN,sum>
=	<OP,14>
sum	<IDN,sum>
-	<OP,10>
1	<INT,1>
;	<SE,28>
}	<SE,27>
}	<SE,27>
else	<KW,8>
{	<SE,26>
sum	<IDN,sum>
=	<OP,14>
0	<INT,0>
;	<SE,28>
}	<SE,27>
int	<KW,1>
max_value	<IDN,max_value>
=	<OP,14>
max	<IDN,max>
(	<SE,24>
a	<IDN,a>
,	<SE,29>
b	<IDN,b>
)	<SE,25>
;	<SE,28>
int	<KW,1>
complex_value	<IDN,complex_value>
=	<OP,14>
complex_function	<IDN,complex_function>
(	<SE,24>
a	<IDN,a>
,	<SE,29>
b	<IDN,b>
,	<SE,29>
sum	<IDN,sum>
)	<SE,25>
;	<SE,28>
int	<KW,1>
op_result	<IDN,op_result>
=	<OP,14>
test_operators	<IDN,test_operators>
(	<SE,24>
a	<IDN,a>
,	<SE,29>
b	<IDN,b>
)	<SE,25>
;	<SE,28>
return	<KW,3>
0	<INT,0>
;	<SE,28>
}	<SE,27>
