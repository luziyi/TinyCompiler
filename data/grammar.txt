program -> compUnit
compUnit -> decl compUnit
compUnit -> funcDef compUnit
compUnit -> $

decl -> constDecl
decl -> varDecl

constDecl -> const bType constDef argConst ;
argConst -> , constDef argConst
argConst -> $

bType -> int
bType -> float

constDef -> Ident = constInitVal

constInitVal -> constExp

varDecl -> bType varDef argVarDecl ;
argVarDecl -> , varDef argVarDecl
argVarDecl -> $

varDef -> Ident
varDef -> Ident = initVal

initVal -> exp

funcDef -> funcType Ident ( funcFParams ) block
funcDef -> int main ( funcFParams ) block
funcDef -> void main ( funcFParams ) block


funcFParams -> funcFParam argFunctionF
funcFParams -> $

argFunctionF -> , funcFParam argFunctionF
argFunctionF -> $

funcType -> void
funcType -> int

funcFParam -> bType Ident

block -> { blockItem }
blockItem -> decl blockItem
blockItem -> stmt blockItem
blockItem -> $

stmt -> lVal = exp ;

stmt -> block

stmt -> argExp ;

stmt -> if ( cond ) stmt else stmt
stmt -> if ( cond ) stmt

stmt -> return argExp ;

argExp -> $
argExp -> exp

exp -> addExp

cond -> lOrExp

lVal -> Ident

primaryExp -> ( exp )

primaryExp -> lVal

primaryExp -> number

number -> IntConst
number -> floatConst

unaryExp -> primaryExp

unaryExp -> Ident callFunc
callFunc -> ( funcRParams )
callFunc -> ( )
funcRParams -> funcRParam argFunctionR
funcRParams -> $
funcRParam -> exp
argFunctionR -> , funcRParam argFunctionR
argFunctionR -> $

unaryExp -> unaryOp unaryExp


unaryOp -> +
unaryOp -> -
unaryOp -> !

mulExp -> unaryExp mulExpAtom

mulExpAtom -> * unaryExp mulExpAtom

mulExpAtom -> / unaryExp mulExpAtom

mulExpAtom -> % unaryExp mulExpAtom

mulExpAtom -> $

addExp -> mulExp addExpAtom
addExpAtom -> + mulExp addExpAtom
addExpAtom -> - mulExp addExpAtom
addExpAtom -> $

relExp -> addExp relExpAtom
relExpAtom -> < addExp relExpAtom
relExpAtom -> > addExp relExpAtom
relExpAtom -> <= addExp relExpAtom
relExpAtom -> >= addExp relExpAtom
relExpAtom -> $

eqExp -> relExp eqExpAtom
eqExpAtom -> == relExp eqExpAtom
eqExpAtom -> != relExp eqExpAtom
eqExpAtom -> $

lAndExp -> eqExp lAndExpAtom
lAndExpAtom -> && eqExp lAndExpAtom
lAndExpAtom -> $

lOrExp -> lAndExp lOrExpAtom
lOrExpAtom -> || lAndExp lOrExpAtom
lOrExpAtom -> $

constExp -> addExp